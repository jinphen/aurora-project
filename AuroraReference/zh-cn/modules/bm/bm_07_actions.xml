<sect2 id="business-model-actions" revision="1">
    <title>在业务流程中使用BM</title>     
      
    <sect3>
        <title>Business Model的基本属性</title>
    <para>
     一个典型的BM文件如下所示：
    </para>
    <programlisting language="bm"><![CDATA[
<bm:model xmlns:bm="http://www.aurora-framework.org/schema/bm" baseTable="EMP" alias="e" >
    <bm:fields>
        <bm:field name="empno" databaseType="BIGINT" dataType="java.lang.Long"/>
        <bm:field name="employee_name" physicalName="ename" databaseType="VARCHAR" dataType="java.lang.String"/>
        <bm:field name="job" databaseType="BIGINT" dataType="java.lang.String"/>
        <bm:field name="mgr" databaseType="BIGINT" dataType="java.lang.Long"/>
        <bm:field name="hiredate" databaseType="DATE" dataType="java.sql.Date"/>
        <bm:field name="deptno" databaseType="BIGINT" dataType="java.lang.Long"/>
        <bm:field name="sal" databaseType="FLOAT" dataType="java.lang.Long"/>
        <bm:field name="comm" databaseType="FLOAT" dataType="java.lang.Long"/>
        <bm:field name="current_date" databaseType="DATE" dataType="java.sql.Date" expression="sysdate"/>
    </bm:fields>
    <bm:primary-key>
        <bm:pk-field name="empno"/>
    </bm:primary-key>
</bm:model>

    ]]></programlisting> 
    <para>
    	简单地说：
     </para>
     <para>
    	&lt;bm:model&gt;相当于一个表；
     </para>
     <para>
    	&lt;bm:fields&gt;相当于表中的一个字段。
     </para>
     <para>
    	下面将对BM中各种tag及其属性的含义进行说明。    	
    </para>
    <para>
        &lt;bm:model&gt;是BM的顶层元素。通过baseTable属性设置其对应的数据库实体（表或视图）的名字，alias设置其别名。
     </para>
     <para>
        上面的例子表示对数据库中名为EMP的表建立模型，并为它设置别名e。通过这个业务模型来执行查询时，将会生成
        <programlisting>
        select ... from EMP e 
        </programlisting>
        这样的语句。
    </para>
    
    <para>
        &lt;bm:fields&gt;部分定义业务模型中包含的字段。通过name来设置字段的名称，通过databaseType和dataType分别设置字段在数据库中的类型，以及对应的java对象类型。数据库类型和Java类型可以不一致，例如，在数据库中定义为BIGINT类型，在Java中可能希望以String来表示。
    </para>
    <para>    
        注意第二个字段，除了name之外，还定义了physicalName。name表示字段从数据库中读取出来以后，以什么名字来命名，而physicalName表示字段在数据库中实际的字段名。在这个例子中，name与physicalName不一致，实际产生的SQL语句将是这样：
    <programlisting>    
        select ename as employee_name from EMP
    </programlisting>
    name属性必须设置，并且在整个&lt;bm:model&gt;范围内，必须唯一。physicalName如果不设置，则表示和name相同。
    </para>
    
    <para>
    &lt;bm:field&gt;不一定对应只对应物理存在的字段，也可以是一个表达式。注意最后一个字段，设置了expression="sysdate"，这将在查询SQL中生成
    <programlisting>    
    select sysdate as current_date
    </programlisting>
    这样的语句。通过expression属性，可以设置任意合乎当前数据库语法规则的表达式。例如，要实现select f1+f2 as f3这样的效果，可以设置&lt;bm:field name="f3" expression="f1+f2" /&gt;。
    </para>
    
    <para>
    &lt;bm:primary-key&gt;部分设置业务模型对应的表的主键。每个&lt;bm:pk-field&gt;设置一个主键对应的字段，通过name属性设置字段名，这个名字必须和前面&lt;bm:fields&gt;部分所定义的某一个字段名一致。如果是联合主键，就为主键中的每一个字段设置&lt;bm:pk-field&gt;属性。
    </para>
    
    </sect3>
    
    <sect3>
        <title>BM的使用</title>
        <para>
        将上述文件存为(Web应用根目录)/WEB-INF/classes/test/emp.bm文件，就可以通过该文件，实现基本的数据库操作。
        </para>
        <para>
        和Java class的命名规则相似，这个文件被引用的名字为test.emp，从WEB-INF/classes/目录开始，每一级子目录的名字，以"."代替"/"，再拼接上文件名，去掉.bm扩展名，就得到BM的完整名称。
        </para>
        <para>
        Aurora框架提供了一系列的Java API来使用BM，但在开发应用程序的时候，多半不需要通过Java代码来使用。Aurora提供了一种方便的机制，可以直接将BM发布为服务，可通过约定的Web URL来访问，并以JSON格式来传递输入参数，以及获得返回的数据。
     	</para>
     	<para>
        以前面的例子来说，BM文件保存完毕后，启动Web服务器，直接在浏览器中访问 http://&gt;主机地址&lt;/web应用目录/autocrud/test.emp/query，就可以得到类似于下面的结果：
        <programlisting><![CDATA[
        ]]></programlisting>
        
        </para>
    </sect3>
    
  
</sect2>