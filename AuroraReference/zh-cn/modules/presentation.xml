<chapter id="presentation">

    <title>Aurora展示层(APL)</title>
    <sect1 id="presentation-overview" revision="1">
        <title>APL(Aurora Presentation Layer)概述</title>
        
        <para>
            APL提供了一整套跨浏览器的UI组件库.所有的UI组件都是基于JavaScript和Html构建的,运行在客户端浏览器中.用户可以在客户端通过调用相应的函数改变UI组件的状态和行为.
        </para>
        
        <para>
            APL UI组件结构图:
        </para>
        <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="images/architecture.jpg" format="JPG" align="center" width="555" depth="369" contentwidth="555" contentdepth="369"/>
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="../shared/images/architecture.jpg" format="JPG" align="center"/>
            </imageobject>
        </mediaobject>

        <para>
            上图展示了所有APL UI组件的继承关系.
        </para>
    </sect1>

    <sect1 id="presentation-serverside" revision="1">
        <title>APL服务端工作原理</title>
        
        <para>
            APL服务端简介
        </para>

        <sect2 id="presentation-serverside-ui-info" revision="1">
            <title>基于组件重用的开发模型</title>            
             <para>Aurora展示层的主要设计场景，是针对具有一定比例相似元素的界面。例如，企业应用中常见的数据查询、维护功能，它们多半都具有表单，标签页，表格等元素。在这种场景下，以重用现成组件的方式来构造界面，将比从头编码的方式更加高效。此外，大规模重用组件至少还有以下几个好处：</para>

    <para>1、在一定程度上提高代码的质量。因为可重用组件通常都是经过充分的测试，和大量实际项目验证。</para>

    <para>2、在多人开发的环境下，更容易实现界面外观、风格的一致性。</para>

    <para>3、让代码更容易维护。如果希望修改grid的DOM结构，只需要修改grid组件涉及的代码，而不需要修改每一处使用grid的界面。</para>
        </sect2>
        
        <sect2 id="presentation-simple-component" revision="1">
            <title>简单高效的组件模型</title>            
           <para>Aurora界面组件的工作模式，可以简单地归纳为：输入组件的运行时期配置（例如，表格的高度，宽度），以及组件绑定的数据模型（例如，一个代表员工清单的的数据集），由组件经过加工，输出文本字节流（HTML/SVG/VML...）。下面的例子中，我们开发一个用于显示金额的组件currency-label，字体加粗，对于负数显示为红色，这个组件可以绑定到数据集的任意一个数字型字段。</para>

    <para>使用这个组件很简单：</para>
           <programlisting language="screen"><![CDATA[
<a:hBox labelWidth="100">
	<label>正数：</label>
    <a:curLabel value="10000"/>
</a:hBox>
<a:hBox labelWidth="100">
	<label>负数：</label>
    <a:curLabel value="-10000"/>
</a:hBox>
]]></programlisting>

    <para>它将产生这样的输出：</para>

     <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="images/presentation/c_label.png" format="png" align="center" />
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="../shared/images/presentation/c_label.png" format="png" align="center"/>
            </imageobject>
        </mediaobject>

    <para>为便于彻底分离组件的外观与核心逻辑，我们可以将html部分放入模板：</para>

    <para>curlabel.tplt 
    <programlisting language="myxml"><![CDATA[                
<DIV class="${wrapClass}" style="width:${width}px;${style}"   >${value}</DIV>
                ]]></programlisting> </para>

    <para>CurrencyLabel.java 
    <programlisting language="java"><![CDATA[                
public class CurrencyLabel {
	public void onCreateViewContent(BuildSession session,
			ViewContext view_context) {
		CompositeMap view = view_context.getView();
		// 从model中获取需要显示的字段
		CompositeMap model = view_context.getModel();

		String val = view.getString(PROPERTITY_VALUE, "");
		String format = view.getString(PROPERTITY_FORMAT, "###,###.00");
		int width = view.getInt(PROPERTITY_WIDTH, 150);
		String sty = view.getString(PROPERTITY_STYLE, "");
		Object obj = model.getObject(val);
		obj = obj == null ? val : obj;
		String value = "";
		if (obj instanceof Date) {
			SimpleDateFormat sdf = new SimpleDateFormat(format);
			value = sdf.format((Date) obj);
		} else if (obj instanceof Long || obj instanceof Double || obj instanceof Integer) {
			DecimalFormat df = new DecimalFormat(format);
			value = df.format(obj);
		} else if (obj != null) {
			value = obj.toString();
		}

		String wrapClass = "item-label";
		try {
			wrapClass = Integer.valueOf(value) > 0 ? "item-label"
					: "item-label-red";
		} catch (NumberFormatException e) {
		}

		// 将动态内容放入ViewContext的Map中，后面将用于替换模版中的同名标记
		Map content_map = view_context.getMap();
		content_map.put("wrapClass", wrapClass);
		content_map.put("width", width);
		content_map.put("style", sty);
		content_map.put("value", value);
	}
}
                ]]></programlisting> </para>

    <para>Aurora提供组件皮肤切换的支持，所有资源文件，不论是在服务端使用的模板，还是客户端引用的javascript或css，都可以在不同皮肤下有自己的版本。如果我们希望我们的currency-label看起来更酷一点，可以为它开发一个新的皮肤，为此只需要重新构造模板文件和样式表：</para>

    <para>currency-label.css 
    <programlisting language="css"><![CDATA[                
.item-label-red{
height:22px;
color:red;
font-weight:bold;
line-height:22px;
vertical-align:middle;
}
                ]]></programlisting> curlabel.tplt 
                <programlisting language="myxml"><![CDATA[                
<DIV class="${wrapClass}" style="width:${width}px;${style}"   >${value}</DIV>
                ]]></programlisting> </para>

    <para>如果一个组件包含下级组件，它将递归地调用下级组件的渲染过程，但它可以不需要了解下级组件的任何细节，因此，第三方组件可以很好地与现成组件搭配使用。下面的例子中，我们显示通过数据库查询获得的员工信息。这里使用aurora标准组件库中的repeater组件对数据集进行循环，每条记录使用box组件对字段进行布局，再使用前面我们自行开发的currency-label组件显示员工工资。</para>
    <para>界面配置代码：</para>
    
    <programlisting language="myxml"><![CDATA[
<a:repeater datamodel="/model/emp_list">
	<a:hBox labelWidth="100">
    	<label>工资：</label>
        <a:curLabel value="@total_amount"/>
	</a:hBox>
</a:repeater>
]]></programlisting> 


    <para>产生的效果：</para>
    
      <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="images/presentation/emp_s.png" format="png" align="center" />
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="../shared/images/presentation/emp_s.png" format="png" align="center"/>
            </imageobject>
        </mediaobject>
<para>
Demo地址：
    <programlisting><![CDATA[
http://aurora.hand-china.com/demo/modules/component/Comp1010/currencyLabel.screen
]]></programlisting>
</para>
        </sect2>
        
        
        <sect2 id="presentation-no-state-component" revision="1">
            <title>无状态组件</title>            
            <para>Aurora组件的在运行时期的渲染过程，非常类似于一组静态函数调用，所有状态数据都通过参数来传递，组件内部不存在任何与session有关的状态数据。这和JSF这样重量级的界面组件模型有本质不同。JSF会在server端维持一份客户端组件的copy，这些组件的生命周期与session有关；而Aurora的组件没有复杂的生命周期，每个界面组件在一个应用内只有一个实例，在构造函数中完成一些全局性的初始化工作，之后对于任何客户端的访问，在任何界面中的使用，都是调用组件的同一个方法去渲染输出，这使得Aurora对server资源的占用显著减少。</para>

    <para>那么，诸如“刷新后依然显示当前用户选中的菜单项”这样的需求如何实现呢？Aurora将它留给应用开发者。可以用url参数，cookie，数据库，或其它任何可能的手段，但这个特性不再是框架的一级公民。在AJAX大行其道的今天，应用系统的架构更倾向于server产生初始的html/javascript界面，提供JSON或XML形式的API，由javascript负责处理客户端的逻辑，大量的纯客户端状态数据存在于浏览器中。</para>

    <para>因此，Aurora放弃了在server端维持界面组件状态的特性，换来的是更好的性能、更好的水平可扩展性、更简洁的组件模型。</para>
        </sect2>
        
        <sect2 id="presentation-face-data" revision="1">
            <title>面向数据</title>            
             <para>Aurora与Java世界其它展示层组件体系的最大区别，就在于Aurora是以纯数据容器作为模型层展示层的交互媒介，而非Java对象。在Aurora组件看来，它所需要展示的数据，每条记录就是一个Map，每个字段就是Map中的一个key-value映射，记录集就是List&lt;Map&gt;，具有层次结构的数据就是包含List&lt;Map&gt;的Map（也就是我们上面例子中使用到的CompositeMap）。</para>

    <para>使用纯数据容器作为模型层的优点：</para>

    <para>1.
    展示层与模型层彻底解耦。展示层组件需要的只是一个容器，以及如何从这个容器里取数的路径信息。至于容器里的数据是来自于关系数据库，文件，还是通过web
    service调用获得，完全不用关心。</para>

    <para>2.
    数据的结构可以在运行时期被修改：增加/删除字段，更改结构，获取更大的灵活性。这些灵活性对于变化频繁的展示层需求来说，是非常有用的。我们来看下面的例子，界面A以列表方式显示员工清单，每个员工一条记录：</para>

    <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="images/presentation/emp_1.png" format="png" align="center" />
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="../shared/images/presentation/emp_1.png" format="png" align="center"/>
            </imageobject>
        </mediaobject>

    <para>如果希望改变界面布局，按部门分组显示，如下图：</para>

   <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="images/presentation/emp_2.png" format="png" align="center" />
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="../shared/images/presentation/emp_2.png" format="png" align="center"/>
            </imageobject>
        </mediaobject>
   

    <para>在前一章中，我们已经看到了Aurora模型层是如何能够灵活地通过配置改变数据结构，这时就用得上了。我们所需做的，只是在原有的数据查询操作之后，增加一个分组转换的转换器：</para>

 <programlisting language="screen"><![CDATA[
  <t:group-transform groupfield="department_id" source="/model/source_emp_list" subgroupname="enabled_flag"
  target="/model/target_emp_list/a"></t:group-transform>
 ]]></programlisting> 


    <para>然后修改界面配置，在原来的列表之外增加一层repeater：</para>

  <programlisting language="screen"><![CDATA[                
<a:repeater datamodel="/model/target_emp_list/a">
    <a:listView datamodel="enabled_flag">
        <a:columns>
            <a:column name="employee_code" align="center" prompt="员工工号"/>
            <a:column name="employee_name" align="center" prompt="员工名"/>
            <a:column name="department_id" align="center" prompt="部门id"/>
        </a:columns>
    </a:listView>
</a:repeater>
                ]]></programlisting>

    <para>完全不需要修改模型层的java代码（因为根本就没有这样的代码），重新编译。</para>
<para>
Demo地址：
    <programlisting><![CDATA[
http://aurora.hand-china.com/demo/modules/component/emp1010/empdemo.screen
]]></programlisting> 
</para>
        
        </sect2>
        
        <sect2 id="presentation-server-client" revision="1">
            <title>服务端组件 + 客户端组件</title>            
            
    <para>在浏览器前端能力越来越被重视的今天，是否开发者只需要找到一个强大的javascript组件库，然后写html和javascript就足够了？实际上，Aurora还可以为前端开发提供一些更好的支持：</para>

    <para>1.
    按需加载资源文件。当一个组件在界面上被使用的时候，它所需要的javascript和css才会被引用到页面中。对于组件开发者来说，只需要声明自己的组件需要哪些js或css就行了；对于应用开发者来说更简单，只需要将组件标签放在界面中。</para>

    <para>2.
    根据需要在server端生成DOM结构。确实有一些纯javascript的界面组件库，它们完全在浏览器中动态生成所有需要的DOM对象，但并非所有场景都适合于这种模式。性能不够好，容易造成内存泄露，需要花费更多时间精力去保证各种版本浏览器的兼容性，这些都是难以解决的问题。Aurora组件可以根据配置，在server端动态生成所需的DOM结构，以及与之配套的javascript，组件开发者可以自由选择哪些DOM在server端生成，哪些在客户端生成。</para>

    <para>3.
    实现一些必需在server端完成的界面控制逻辑。由于aurora组件是基于配置的，而配置又是可以在运行时期动态修改的，因此开发者可以很容易地在界面渲染之前，执行一些诸如“去掉当前用户没有权限查看的表格列”这样的操作，而这类与安全性有关的操作，仅仅用javascript在客户端实现是不够的。</para>
 
        </sect2>
        <sect2 id="presentation-serverside-ui" revision="1">
            <title>Aurora如何创建用户界面</title>            
            <para>
                正文...
            </para>
        </sect2>
        
        <sect2 id="presentation-serverside-container" revision="1">
            <title>数据容器</title>            
            <para>
                正文...
            </para>
        </sect2>
        
        <sect2 id="presentation-serverside-mapping" revision="1">
            <title>组件映射</title>            
            <para>
                正文...
            </para>
        </sect2>
        
        <sect2 id="presentation-serverside-buildsession" revision="1">
            <title>BuildSession</title>            
            <para>
                正文...
            </para>
        </sect2>
        
        <sect2 id="presentation-serverside-events" revision="1">
            <title>事件机制</title>            
            <para>
                正文...
            </para>
        </sect2>
        
        <sect2 id="presentation-serverside-resource" revision="1">
            <title>资源文件处理</title>            
            <para>
                正文...
            </para>
        </sect2>
        
        <sect2 id="presentation-serverside-dynamic" revision="1">
            <title>动态组件配置</title>            
            <para>
                正文...
            </para>
        </sect2>
        
        
    </sect1>
    

    <sect1 id="presentation-client" revision="1">
        <title>APL UI组件</title>            
        <para>
            APL 提供了各种丰富的UI组件,例如布局组件(HBox,VBox,Form..),数据展现组件(Grid,Table,TreeGrid等),数据容器组件(DataSet等).
        </para>
        
        <para>
            APL UI组件兼容以下类型的浏览器
        </para>
        
        <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="images/browser.jpg" format="JPG" width="439" depth="40" contentwidth="439" contentdepth="40"/>
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="../shared/images/browser.jpg" format="JPG"/>
            </imageobject>
        </mediaobject>
        
        <sect2 id="presentation-client-lib" revision="1">
            <title>核心Javascript API</title>            
            <para>
                APL采用了第三方的开源库Ext Core 3.0 (http://www.sencha.com/products/extcore/)作为底层的开发库,在此基础上构建了丰富的组件库.
            </para>
        </sect2>
        
        &dataset;
        
        <sect2 id="presentation-client-layout" revision="1">
            <title>界面布局(Layout)</title>            
            <para>
               APL的布局是基于服务器端生成,这和其他的基于客户端布局的开源框架有点不同.APL的布局基本上是通过table在服务端事先生成好的,这样的好处在于可以
               减少客户端机器的压力,充分利用服务器的资源优势.
            </para>
            
            <para>
               APL的布局主要是由Box,VBox,HBox,Form,FieldSet等容器组件组成.
            </para>
            
            &box;
            &vbox;
            &hbox;
            &form;
            &fieldset;            
        </sect2>
        
        <sect2 id="presentation-client-editor" revision="1">
            <title>编辑组件</title>            
            <para>
               编辑组件是提供文本输入编辑及选择功能的组件，主要是由TextField,NumberField,ComboBox,DatePicker,Lov,DateTimePicker,TextArea,Radio,CheckBox等组件组成。
            </para>
            <para>
               编辑组件也可作为Grid组件的Editor，具体请参阅Grid的编辑器。
            </para>
            &textfield;
            
            &numberfield;
            
            &combobox;
            
            &datefield;

            &datepicker;            
            
            &lov;
            
            &multilov;
            
            &datetimepicker;
            
            &textarea;
            
            &radio;
            
            &checkbox;
            
        </sect2>
        
        &tab;
		
        &tree;
        
        &grid;
        
        &table;
            
        &window;
        
        &chart;
        <sect2 id="presentation-client-upload" revision="1">
            <title>上传组件</title>            
            <para>
               正文 ...
            </para>            
        </sect2>
        
        &treegrid;
    </sect1>
    
    <sect1 id="presentation-custom" revision="1">
        <title>个性化及定制</title>
        
        <para>
            个性化及定制：
        </para>
        <sect2 id="presentation-custom-theme" revision="1">
            <title>界面定制</title>
            <para>
                界面定制及更改：
            </para>
        </sect2>
        <sect2 id="presentation-custom-component" revision="1">
            <title>组件样式修改</title>
            <para>
                组件样式修改：
            </para>
        </sect2>
        <sect2 id="presentation-custom-site" revision="1">
            <title>修改网页整体布局</title>
            <para>
                修改网页整体布局：
            </para>
        </sect2>
    </sect1>
    
    
    <sect1 id="presentation-language" revision="1">
        <title>多语言支持</title>
        
        <para>
            个性化及定制：
        </para>
        <sect2 id="presentation-language-database" revision="1">
            <title>基于数据库存储的多语言支持</title>
            <para>
                基于数据库存储的多语言支持：
            </para>
        </sect2>
        <sect2 id="presentation-language-custom" revision="1">
            <title>自定义多语言实现</title>
            <para>
                自定义多语言实现：
            </para>
        </sect2>
        <sect2 id="presentation-language-screen" revision="1">
            <title>Screen及模板资源文件中的多语言支持</title>
            <para>
                xxx：
            </para>
        </sect2>
    </sect1>
    
    $dataset
</chapter>


