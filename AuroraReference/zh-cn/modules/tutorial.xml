<chapter id="tutorial">
	<title>Aurora框架概览</title>

    
	<sect1 id="tutorial-install"  revision="2">
		<title>
	       面向配置，SOA，RESTful
		</title>
	 <para>Aurora提供了一种面向配置的业务建模方式，能够快速实现数据库相关的操作，并以RESTful的风格将这些操作变为服务。</para>

    <para>在示例程序中，对[订单]的查询及维护，就是通过这样一段配置来实现的：</para>

    <programlisting><![CDATA[                
<bm:model xmlns:bm="http://www.aurora-framework.org/schema/bm" 
xmlns:f="aurora.database.features" alias="h" baseTable="ord_sales_order_headers">
    <bm:fields>
        <bm:field name="order_number" databaseType="VARCHAR" datatype="java.lang.String"/>
        <bm:field name="return_order_flag" databaseType="VARCHAR" datatype="java.lang.String"/>
      	....
        <bm:field name="close_date" databaseType="DATETIME" datatype="java.sql.Date"/>
    </bm:fields>
    <bm:primary-key>
        <bm:pk-field name="sales_order_id"/>
    </bm:primary-key>
    <bm:data-filters>
        <bm:data-filter name="company_id" enforceOperations="query,update" 
        expression="h.company_id=${/session/@company_id}"/>
    </bm:data-filters>
    <bm:features>
        <f:standard-who/>
    </bm:features>
    <bm:query-fields>
        <bm:query-field field="sales_order_id" queryOperator="="/>
		...
        <bm:query-field field="status" queryOperator="="/>
        <bm:query-field field="closed_flag" queryOperator="="/>
    </bm:query-fields>
    <bm:relations>
        <bm:relation name="emp" joinType="LEFT OUTER" refAlias="e" refModel="fnd.FND1030.fnd_employees">
            <bm:reference foreignField="employee_id" localField="salesmen_employee_id"/>
        </bm:relation>
        <bm:relation name="partner" joinType="LEFT OUTER" refAlias="p" 
        refModel="inv.INV2010.fnd_business_partners">
            <bm:reference foreignField="partner_id" localField="customer_id"/>
        </bm:relation>
        <bm:relation name="warehouses" joinType="LEFT OUTER" refAlias="wh" 
        refModel="inv.INV1030.inv_warehouses">
            <bm:reference foreignField="warehouse_id" localField="issue_warehouse_id"/>
        </bm:relation>
    </bm:relations>
    <bm:ref-fields>
        <bm:ref-field name="salesmen_employee_name" relationName="emp" sourceField="employee_name"/>
        <bm:ref-field name="customer_name" relationName="partner" sourceField="partner_name"/>
        <bm:ref-field name="issue_warehouse_name" relationName="warehouses" sourceField="warehouse_name"/>
    </bm:ref-fields>
</bm:model>
                ]]></programlisting>

    <para>通过这个配置文件，我们可以实现基本的数据库操作，例如根据用户输入的条件执行动态查询SQL语句，对数据进行新增、修改，或包含各种组合的批量操作，这些功能可以直接通过Web
    service或简单的HTTP+JSON方式调用。例如，在浏览器中通过HTTP请求:
     <programlisting><![CDATA[
http://aurora.hand-china.com/demo/autocrud/ord.ORD5010.ord_sales_order_headers/query?sales_order_id=45&amp;
pagesize=10&amp;pagenum=1&amp;_fetchall=false&amp;_autocount=false&amp;ORDER_FIELD=order_number
]]></programlisting>
    </para>

    <para>即表示执行对[ord.ORD5010.ord_sales_order_headers]的查询，筛选条件为[sales_order_id=45]按[order_number]排序，分页显示，每页[10]条记录。这个查询会返回一段JSON格式的数据：</para>

     <programlisting><![CDATA[
{"result":{"record":{"total_amount":"-19705.93","order_number":"WW2012101201","company_id":22,
		"customer_desc":"BW-百威","closed_flag":"N","return_order_flag":"Y",
		"status":"Verified","customer_name":"百威","close_date":"2012-10-15 00:00:00",
		"salesmen_employee_name":"王五","closed_by":21,"sales_order_id":45,
		"goods_issue_flag":"N","description":"中文","salesmen_employee_id":6,
		"order_date":"2012-10-12 00:00:00","currency_code":"CNY","customer_id":3}},
		"success":true}
]]></programlisting>
    <para>如果以SOAP的方式发起请求：</para>
     <programlisting><![CDATA[
http://aurora.hand-china.com/demo/autocrud/ord.ORD5010.ord_sales_order_headers/query?sales_order_id=45&amp;
pagesize=10&amp;pagenum=1&amp;_fetchall=false&amp;_autocount=false&amp;ORDER_FIELD=order_number
]]></programlisting>
    
    
    <para>使用soap客户段访问上面的连接则会得到标准的XML格式的结果：</para>

   	     <programlisting><![CDATA[                
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
    <soapenv:Body>
        <ord.ORD5010.ord_sales_order_headers success="true">
            <record total_amount="-19705.93" order_number="WW2012101201" company_id="22" 
            customer_desc="BW-百威" closed_flag="N" return_order_flag="Y" status="Verified" 
            customer_name="百威" salesmen_employee_name="王五" closed_by="21" sales_order_id="45" 
            goods_issue_flag="N" description="中文" salesmen_employee_id="6" currency_code="CNY"
            customer_id="3"/>
        </ord.ORD5010.ord_sales_order_headers>
    </soapenv:Body>
</soapenv:Envelope>
                ]]></programlisting>

    <para>对于[ord.ORD5010.ord_sales_order_headers]/insert、[ord.ORD5010.ord_sales_order_headers]/update、[ord.ORD5010.ord_sales_order_headers]/delete分别表示对数据执行新增、更新、删除操作；而[ord.ORD5010.ord_sales_order_headers]/batch_update则表示对一组数据进行批量操作，可同时执行新增或更改。</para>

	</sect1>

<sect1 id="tutorial-install-download" revision="1">
			<title>
	灵活的扩展机制
			</title>
            
	 <para>使用框架自动生成的SQL，虽然便利，但总会遇到一些特殊的需求，使得框架标准功能所产生的SQL无法直接使用。例如：执行删除操作时不是物理删除而是做标记；执行更改时需要同时保存历史记录；需要利用数据库的本地SQL扩展语法等。这些需求是与特定的产品、项目或使用场景相关的，框架本身无法穷举各种可能。
    Aurora
    BM提供了一种面向特性的扩展机制，使得开发者可以针对这类特殊需求开发插件式的代码。Aurora提供的基于数据耦合，事件驱动，过程抽象的扩展机制，使得这类插件代码非常简洁。
    例如，为利用Oracle数据库的sequence特性去生成主键，只需要在原有的BM文件中添加一句配置： &lt;o:sequence-pk
    xmlns:o="...." /&gt; 这样，生成的insert语句就由原先的标准SQL：  </para>
    
     <programlisting><![CDATA[
insert into table_name (f1,f2, ..., fn) values (v1, v2, ... , vn) 
变为 
begin insert into table_name (f1, f2, ..., fn)
      values (f1_sequence.nextval, v2, ... , vn) returning f1 into :p1; 
end;
]]></programlisting>
 		</sect1>

		<sect1 id="tutorial-install-configuration" revision="1">
			<title>
	固态的对象 vs 液态的数据
			</title>
	<para>与常见的O/R映射工具不同的是，Aurora不使用静态java建模，没有关系数据库映射到java对象这样的步骤，而是以纯粹的数据容器作为数据的载体。应用开发者只要完成BM配置文件，保存到服务器约定的路径，就得到一组JSON或XML数据服务，可以立即在javascript或其他支持web
    service的语言中，对这些服务进行调用。对BM的修改也是即时生效，没有编译、重部署的步骤。我们甚至可以在运行时期动态生成这样的BM，或修改原有BM的配置，以实现特殊的需求——例如，通过植入一个拦截器，在BM文件被解析之前，动态删除当前用户没有权限去访问的字段，来实现可配置的列安全控制。</para>

    <para>使用纯容器而不是对象作为数据的承载体，一个显而易见的优势就是灵活性。传统的O/R
    Mapping机制所产生的对象，其结构是编译时期决定的，而容器所承载的数据可以在运行时期改变其内容与结构。Aurora提供了多种数据转换的处理器，可以将来自关系数据库的单层结构，转换为多级分组结构、树形层次结构、哈希表结构，或者对数据进行行列转置。我们来看下面的例子：</para>
    <para>
    	下面一组数据是数据库中常见的数据结构,包括组织，公司，姓名，工号，以及直接上级。我们分别进行数据分组、转化哈希表、行列转换与树形结构转换。    
    </para>
<programlisting><![CDATA[
<source_emp_list>
    <record department_id="49" employee_code="EMP01" employee_name="莫言" employee_id="1"/>
    <record department_id="44" employee_code="EMP02" employee_name="李四" employee_id="5"/>
    <record department_id="46" employee_code="EMP05" employee_name="王五" employee_id="6"/>
    <record department_id="49" employee_code="EMP06" employee_name="徐洋" supervisor="1" employee_id="10000"/>
    <record department_id="49" employee_code="EMP07" employee_name="马飞" supervisor="1" employee_id="10001"/>
    <record department_id="49" employee_code="EMP08" employee_name="蔡斌" supervisor="5" employee_id="10002"/>
    <record department_id="44" employee_code="EMP09" employee_name="李焱" supervisor="10001" employee_id="10003"/>
    <record department_id="44" employee_code="EMP11" employee_name="王猛" supervisor="10002" employee_id="10004"/>
    <record department_id="49" employee_code="EMP10" employee_name="王洋" supervisor="6" employee_id="10005"/>
    <record department_id="46" employee_code="EMP12" employee_name="赵风" supervisor="10005" employee_id="10006"/>
</source_emp_list>
]]></programlisting>
<para>
		1、根据［department_id］数据分组：
    </para>
<para>
		配置代码：
    </para>
<programlisting><![CDATA[
<t:group-transform groupfield="department_id" source="/model/source_emp_list" target="/model/group_transform"/>
]]></programlisting>
<para>
		转换结果：
    </para>
<programlisting><![CDATA[
<group_transform>
    <group>
        <record department_id="49" employee_code="EMP01" employee_name="莫言" employee_id="1"/>
        <record department_id="49" employee_code="EMP06" employee_name="徐洋" employee_id="10000"/>
        <record department_id="49" employee_code="EMP07" employee_name="马飞" employee_id="10001"/>
        <record department_id="49" employee_code="EMP08" employee_name="蔡斌" employee_id="10002"/>
        <record department_id="49" employee_code="EMP10" employee_name="王洋" employee_id="10005"/>
    </group>
    <group>
        <record department_id="44" employee_code="EMP02" employee_name="李四" employee_id="5"/>
        <record department_id="44" employee_code="EMP09" employee_name="李焱" employee_id="10003"/>
        <record department_id="44" employee_code="EMP11" employee_name="王猛" employee_id="10004"/>
    </group>
    <group>
        <record department_id="46" employee_code="EMP05" employee_name="王五" employee_id="6"/>
        <record department_id="46" employee_code="EMP12" employee_name="赵风" employee_id="10006"/>
    </group>
</group_transform>
]]></programlisting> 
<para>
		2、转换为以[employee_code]为key的哈希表：
    </para>
<para>
		配置代码：
    </para>
<programlisting><![CDATA[
<t:map-transform keyField="employee_code" source="/model/source_emp_list" target="/model/map_transform"/>
]]></programlisting>
<para>
		转换结果：
    </para>
<programlisting><![CDATA[
<map_transform EMP10="{department_id=49,employee_code=EMP10, employee_name=王洋, employee_id=10005}"
               EMP01="{department_id=49, employee_code=EMP01,employee_name=莫言, employee_id=1}" 
               EMP02="{department_id=44, employee_code=EMP02,employee_name=李四, employee_id=5}" 
               EMP05="{department_id=46, employee_code=EMP05,employee_name=王五, employee_id=6}" 
               EMP12="{department_id=46, employee_code=EMP12,employee_name=赵风, employee_id=10006}" 
               EMP07="{department_id=49, employee_code=EMP07,employee_name=马飞, employee_id=10001}"
               EMP11="{department_id=44, employee_code=EMP11,employee_name=王猛, employee_id=10004}" 
               EMP06="{department_id=49, employee_code=EMP06,employee_name=徐洋, employee_id=10000}" 
               EMP08="{department_id=49, employee_code=EMP08,employee_name=蔡斌, employee_id=10002}" 
               EMP09="{department_id=44, employee_code=EMP09,employee_name=李焱, employee_id=10003}"/>
]]></programlisting> 
<para>
	3、按[department_id]分组	，将[employee_code]为key、[employee_name]为值，进行行列转换：
    </para>
<para>
		配置代码：
    </para>
<programlisting><![CDATA[
<t:matrix-transform columnField="employee_code" valueField="employee_name" groupField="department_id" 
		source="/model/source_emp_list" target="/model/matrix_transform"/>
]]></programlisting>
<para>
		转换结果：
    </para>
<programlisting><![CDATA[
<matrix_transform >
    <record department_id="44" EMP02="李四" EMP11="王猛" EMP09="李焱"/>
    <record department_id="46" EMP05="王五" EMP12="赵风"/>
    <record department_id="49" EMP10="王洋" EMP01="莫言" EMP07="马飞" EMP06="徐洋" EMP08="蔡斌"/>
</matrix_transform>
]]></programlisting>
<para>
	4、根据上下级关系，转换为树形结构。
    </para>
<para>
		配置代码：
    </para>
<programlisting><![CDATA[
<t:tree-transform idField="employee_id" parentField="superior" source="/model/source_emp_list" 
	target="/model/tree_transform">
]]></programlisting>
<para>
		转换结果：
    </para>
<programlisting><![CDATA[
<tree_transform>
    <record employee_code="EMP01" employee_name="莫言" employee_id="1">
        <record employee_code="EMP06" employee_name="徐洋" supervisor="1" employee_id="10000"/>
        <record employee_code="EMP07" employee_name="马飞" supervisor="1" employee_id="10001">
            <record employee_code="EMP09" employee_name="李焱" supervisor="10001" employee_id="10003"/>
        </record>
    </record>
    <record employee_code="EMP02" employee_name="李四" employee_id="5">
        <record employee_code="EMP08" employee_name="蔡斌" supervisor="5" employee_id="10002">
            <record employee_code="EMP11" employee_name="王猛" supervisor="10002" employee_id="10004"/>
        </record>
    </record>
    <record employee_code="EMP05" employee_name="王五" employee_id="6">
        <record employee_code="EMP10" employee_name="王洋" supervisor="6" employee_id="10005">
            <record employee_code="EMP12" employee_name="赵风" supervisor="10005" employee_id="10006"/>
        </record>
    </record>
</tree_transform>
]]></programlisting>



<programlisting><![CDATA[
<t:group-transform groupfield="department_id" source="/model/source_emp_list" 
subgroupname="enabled_flag" target="/model/target_emp_list/a"></t:group-transform>
]]></programlisting>

    <para>这些转换是完全通过配置来实现的，并且可以自由组合叠加。相比之下，静态的Java对象构成的模型无法在运行时期改变其固有结构，不能动态地增加或删除字段，也无法将其数据结构由数组变成多级层级。如果你需要做一个按客户、订单、订单行这样用三个层次去展示数据的界面，你就必须事先建立客户包含多个订单，每个订单包含多个订单行这样的对象层级结构；如果某一天需求改变了，要在客户中间增加一层收货地址，变为4级结构，你必须再回头修改多个Java对象的结构，修改一系列映射配置文件，重新编译、部署。而在Aurora中，你需要的仅仅是为层级数据转换器增加一行配置。</para>

		</sect1>	
	<sect1 id="tutorial-query">
		<title>
            接口抽象 vs 过程抽象
		</title>  	 
		<para>作为面向对象开发方式强调接口抽象的补充，Aurora建立了一种过程抽象的机制。Aurora将数据从存储层的获取到展示层的输出（假如我们把为web
    service提供的XML数据也看成是一种特定类型的输出），看做是一个数据容器被一系列彼此完全独立的处理器依次处理的过程，而非传统面对对象模式下一系列对象方法调用的组合。下图展示了一个典型操作的例子。首先，前置处理器将当前用户的id、角色、登录语言等信息放入容器中，第一个处理器执行SQL查询，将数据从JDBC结果集转换为List+Map结构的复合数据容器，每条记录对应一个Map，整个数据集对应一个List；第二个处理器对数据进行多语言的转换，将数据库中按代码存储的字段，翻译成当前用户所使用的语言下实际的描述；第三个处理器进行权限控制，将当前用户没有权限查看的字段从Map中移除；第四个处理器进行数据结构的转换，将数据由一维链表转换为多级层次结构，以适应展示层界面的需要。</para>

    <para>在这个过程中，数据由数据库中提取，到最终展示，要经过那些处理步骤，每个步骤由谁来处理，完全是通过配置而非硬编码来实现的。开发人员可以在任意一点截获控制，加入自己的处理器，实现特殊的需求。每个处理器都是功能单一、高度内聚、结构简单、易于维护的，并且具有很高的可重用性。处理器之间，通过数据容器进行参数的传递，实现了最为松散的耦合级别——数据耦合。</para>

    <para>相比传统的O/R
    Mapping、存储层与展示层之间通过对象来传递数据、展示层调用对象的方法来存储属性这种完全依赖于接口调用的开发模式，Aurora配置驱动、面向数据、过程抽象+处理器的实现机制，体现了无与伦比的灵活性，实现了更高程度的代码复用。</para>

    <para/>	 
	</sect1>
	
</chapter>
