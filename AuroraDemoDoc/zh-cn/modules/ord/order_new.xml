<sect1 id="purchaseorder-insert" revision="1">
    <title>新增界面</title>            
    <para>
		本章节将详细介绍一下如何使用Aurora框架来构建一个新增订单界面。
    </para>
    <sect2 id="purchaseorder-insert-create-table" revision="1">
	    <title>建立表结构</title>
	    <para>
			在数据库中再创建一张名为PUR_PURCHASE_ORDER_LINES的表作为订单行表。其字段主要有订单行ID，订单头ID，物品ID，数量，价格，金额等字段。
	    </para>
	    <programlisting><![CDATA[
Tables
`-- PUR_PURCHASE_ORDER_LINES
    `-- Columns
    	|-- PURCHASE_ORDER_LINE_ID
    	|-- PURCHASE_ORDER_HEADER_ID
    	|-- ITEM_ID
    	|-- QUANTITY
    	|-- PRICE
    	`-- AMOUNT
		 ]]></programlisting>
		<para>
			另外还需要两张表分别是采购员信息表和供应商信息表来作为此表的BUYER_EMPLOYEE_ID和VENDER_ID字段的引用表。
	    </para>
    </sect2>
    <sect2 id="purchaseorder-insert-create-bm" revision="1">
	    <title>新建一个BM文件</title>
	    <para>
			在web/WEB-INF/classes路径下的pur目录中新建一个BM文件命名为pur_purchase_order_lines.bm用于订单行的单条数据操作。
	    </para>
	    <programlisting><![CDATA[
Project
`-- web
    `-- WEB-INF
    	`-- classes
	        `-- pur
	            `-- pur_purchase_order_lines.bm
		 ]]></programlisting>
		<para>
			bm的基本内容如下：
	    </para>
	    <programlisting language="bm"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<bm:model xmlns:e="aurora.service.exception" xmlns:o="aurora.database.local.oracle" alias="h" 
	xmlns:bm="http://www.aurora-framework.org/schema/bm" xmlns:f="aurora.database.features"
	baseTable="PUR_PURCHASE_ORDER_HEADERS" defaultOrderBy="order_number" needAccessControl="false">
    <bm:fields>
    </bm:fields>
    <bm:query-fields>
    </bm:query-fields>
    <bm:primary-key>
    	<bm:pk-field name="purchase_order_line_id"/>
    </bm:primary-key>
</bm:model>
		 ]]></programlisting>
		<para>
			在bm:fields标签下增加查询结果字段。
	    </para>
	    <programlisting language="bm"><![CDATA[
<bm:field name="purchase_order_line_id" databaseType="INT" datatype="java.lang.Long" isAutoGeneratedKey="true"/>
<bm:field name="purchase_order_header_id" databaseType="INT" datatype="java.lang.Long"/>
<bm:field name="item_id" databaseType="INT" datatype="java.lang.Long"/>
<bm:field name="quantity" databaseType="INT" datatype="java.lang.Double"/>
<bm:field name="price" databaseType="INT" datatype="java.lang.Double"/>
<bm:field name="amount" databaseType="INT" datatype="java.lang.Double"/>
<bm:field name="item_code_name" expression="(select b.item_code || '' || b.item_name from inv_items_basics b
		where b.item_id = t1.item_id)" forInsert="false" forUpdate="false"/>
    
		 ]]></programlisting>
		<para>
			在bm:query-fields标签下增加查询字段。
	    </para>
	    <programlisting language="bm"><![CDATA[
<bm:query-field field="purchase_order_line_id" queryOperator="="/>
<bm:query-field field="purchase_order_header_id" queryOperator="="/>
		 ]]></programlisting>
	</sect2>
    <sect2 id="purchaseorder-insert-create-server-script" revision="1">
	    <title>新建一个服务器端脚本</title>
	    <para>
			在web/WEB-INF/server-script路径下的pur目录中新建一个JS文件命名为pur_purchase_order.js，用于对数据校验和提交等操作。
	    </para>
	    <programlisting><![CDATA[
Project
`-- web
    `-- WEB-INF
    	`-- server-script
		    `-- pur
		        `-- pur_purchase_order.js
		 ]]></programlisting>
		<para>
			JS中主要是inserOrder方法，对数据校验和插入数据库操作，如下：
	    </para>
	    <programlisting language="javascript"><![CDATA[
var PurOrder = {
	getHeadBm : function(){
		return $bm('pur.pur_purchase_order_headers');
	},
	getLineBm : function(){
		return $bm('pur.pur_purchase_order_lines');
	},
	insertOrder : function(h) {
		if (!h) return;
		var arr = h.getChild('lines').getChildren();
		if (arr.length == 0)
			raise_app_error('没有订单行，不能保存。');
		try{
			PurOrder.getHeadBm().insert(h);
		}catch(e){
			raise_app_error('订单编号重复，请重新输入。');
		}
		var l_bm = PurOrder.getLineBm();
		for (i = 0; i < arr.length; i++) {
			arr[i].purchase_order_header_id = h.purchase_order_header_id;
			l_bm.insert(arr[i]);
		}
	}
}
		 ]]></programlisting>
	<para>
		校验不通过或者执行异常，都可以通过raise_app_error方法将错误信息抛出。
	</para>
	</sect2>
    <sect2 id="purchaseorder-insert-create-svc" revision="1">
	    <title>新建一个SVC文件</title>
	    <para>
			在web/modules路径下的pur目录中新建一个SVC文件命名为pur_purchase_order_save.svc，用于批量操作订单头行的数据。
	    </para>
	    <programlisting><![CDATA[
Project
`-- web
    `-- modules
	    `-- pur
	        `-- pur_purchase_order_save.svc
		 ]]></programlisting>
		<para>
			svc中引入之前定义的服务端脚本，然后对客户端提交的数据进行处理，其内容如下：
	    </para>
	    <programlisting language="screen"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<a:service xmlns:s="aurora.plugin.script" xmlns:a="http://www.aurora-framework.org/application"
xmlns:p="uncertain.proc" trace="true">
    <a:init-procedure>
        <s:server-script>
            $define('pur/pur_purchase_order.js');
            var header = $ctx.parameter.getChildren()[0];
            if (header) {
                header.company_id = 22;
                PurOrder.insertOrder(header);
            }</s:server-script>
    </a:init-procedure>
    <a:service-output output="parameter"/>
</a:service>
		 ]]></programlisting>
	</sect2>
    <sect2 id="purchaseorder-insert-create-screen" revision="1">
	    <title>新建一个Screen文件</title>            
	    <para>
			在web/modules路径下的pur目录中新建一个Screen文件命名为pur_purchase_order_new.screen
	    </para>
	    <programlisting><![CDATA[
Project
`-- web
    `-- modules
        `-- pur
            `-- pur_purchase_order_new.screen
		 ]]></programlisting>
		<para>
			screen的基本内容如下：
	    </para>
	    <programlisting language="screen"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<a:screen xmlns:a="http://www.aurora-framework.org/application">
    <a:init-procedure>
    </a:init-procedure>
    <a:view>
        <script>
        </script>
        <a:dataSets>
        </a:dataSets>
        <a:defaultScreen>
        </a:defaultScreen>
    </a:view>
</a:screen>
		 ]]></programlisting>
		<para>
			在a:dataSets标签下新建一个DataSet用于存放币种的选项集。为了简单起见，这里用硬编码几条数据。
	    </para>
	    <programlisting language="screen"><![CDATA[
<a:dataSet id="ord_order_currency_code_ds">
    <a:datas>
        <a:record currency_code="CNY"/>
        <a:record currency_code="JPY"/>
        <a:record currency_code="USD"/>
    </a:datas>
</a:dataSet>
		 ]]></programlisting>
		<para>
			再新建一个DataSet#order_headers_ds用于存放订单头的数据，以及一个DataSet#order_lines_ds用于存放订单行的数据。order_headers_ds的submitUrl谁为之前创建的SVC。行order_lines_ds绑定到头order_headers_ds。
	    </para>
	    <programlisting language="screen"><![CDATA[
<a:dataSet id="order_headers_ds" autoCreate="true" model="pur.pur_purchase_order_headers"
	submitUrl="${/request/@context_path}/modules/pur/pur_purchase_order_save.svc">
    <a:fields>
        <a:field name="order_number" required="true"/>
        <a:field name="buyer_employee_id" defaultValue="${/session/@employee_id}"/>
        <a:field name="buyer_employee_name" defaultValue="${/session/@employee_name}" readOnly="true"/>
        <a:field name="vender_id"/>
        <a:field name="customer_desc" lovHeight="500" lovService="pur.fnd_business_partner_lov"
		lovWidth="500" required="true" title="客户选择">
            <a:mapping>
                <a:map from="partner_id" to="vender_id"/>
                <a:map from="partner_name" to="customer_name"/>
                <a:map from="partner_desc" to="customer_desc"/>
            </a:mapping>
        </a:field>
        <a:field name="order_date"/>
        <a:field name="currency_code" defaultValue="CNY" displayField="currency_code"
		options="ord_order_currency_code_ds" returnField="currency_code" valueField="currency_code"/>
        <a:field name="status"/>
    </a:fields>
</a:dataSet>
<a:dataSet id="order_lines_ds" bindName="lines" bindTarget="order_headers_ds" fetchAll="true"
	model="pur.pur_purchase_order_lines" selectable="true">
    <a:fields>
        <a:field name="item_id" required="true"/>
        <a:field name="item_desc" lovGridHeight="260" lovService="pur.inv_item_basic_lov"
		lovWidth="600" required="true" title="选择物品">
            <a:mapping>
                <a:map from="item_desc" to="item_desc"/>
                <a:map from="item_id" to="item_id"/>
            </a:mapping>
        </a:field>
        <a:field name="quantity" required="true"/>
        <a:field name="price" required="true"/>
    </a:fields>
</a:dataSet>
		 ]]></programlisting>
		<para>
			在a:defaultScreen标签下增加一个订单头的表单，包含各字段的输入框。增加一个Grid来添加订单行。
	    </para>
	    <programlisting language="screen"><![CDATA[
<a:defaultScreen>
	<a:form column="2" title="订单新增" width="500">
        <a:textField name="order_number" bindTarget="order_headers_ds" prompt="订单号">
        </a:textField>
        <a:lov name="customer_desc" bindTarget="order_headers_ds" prompt="客户"/>
        <a:comboBox name="currency_code" bindTarget="order_headers_ds" prompt="币种" width="60"/>
        <a:datePicker name="order_date" bindTarget="order_headers_ds" prompt="订单日期"/>
        <a:label name="status_name" bindTarget="order_headers_ds" prompt="状态"
		renderer="status_name_renderer" style="background-color:#ccc;text-align:center;" width="80"/>
        <a:label name="buyer_employee_name" bindTarget="order_headers_ds" prompt="销售员"
		style="background-color:#ccc;text-align:center;" width="90"/>
    </a:form>
    <a:hBox>
        <a:button click="btn_save_order" text="保存订单" width="100"/>
    </a:hBox>
    <a:grid bindTarget="order_lines_ds" height="350" navBar="false" width="500">
        <a:columns>
            <a:column name="line_number" align="center" editor="e_tf" prompt="行号" width="40"/>
            <a:column name="item_desc" editor="e_lov" prompt="物品" width="120"/>
            <a:column name="quantity" align="right" editor="e_nf_float1" prompt="交易数量"
			renderer="non_negative_renderer" width="80"/>
            <a:column name="price" align="right" editor="e_nf_float2" prompt="单价" width="50"/>
            <a:column name="amount" align="right" autoAdjust="true" footerRenderer="total_amount_footRender"
			prompt="金额" renderer="non_negative_renderer" width="60"/>
        </a:columns>
        <a:editors>
            <a:lov id="e_lov"/>
            <a:textField id="e_tf"/>
            <a:numberField id="e_nf_float1" allowDecimals="true" allowFormat="true" allowNegative="false"/>
            <a:numberField id="e_nf_float2" allowDecimals="true" allowFormat="true" allowNegative="false"/>
        </a:editors>
        <a:toolBar>
            <a:button click="create_line" text="新增"/>
            <a:button click="delete_line" text="删除"/>
        </a:toolBar>
    </a:grid>
</a:defaultScreen>
		 ]]></programlisting>
</sect2>
<sect2 id="purchaseorder-insert-validate" revision="1">
	    <title>前端校验</title>
	    <para>
			由于订单编号是唯一的，所以在提交之前应该校验一下数据库中有无重复编号。我们可以在订单编号输入框上监听失去焦点事件来校验。
	    </para>
	    <programlisting language="screen"><![CDATA[
<a:textField name="order_number" bindTarget="order_headers_ds" prompt="订单号">
    <a:events>
        <a:event name="blur" handler="onOrderNumberBlur"/>
    </a:events>
</a:textField>
		 ]]></programlisting>
		<para>
			实现校验函数onOrderNumberBlur，函数中需要用到ajax去服务器取数据校验，如下：
	    </para>
	    <programlisting language="javascript"><![CDATA[
<a:link id="lk_order_number_check"
url="${/request/@context_path}/modules/pur/pur_purchase_order_number_check.svc"/>
<script>
function onOrderNumberBlur() {
    var rec = $('order_headers_ds').getCurrentRecord();
    var ret = validate_order_number(rec.get('order_number'));
    if (ret !== true) {
        Aurora.showErrorMessage('Error', ret);
    }
}
function validate_order_number(value) {
    if (!value) return true;
    var ret = true;
    Aurora.request({
        url: $('lk_order_number_check').getUrl(),
        para: {
            order_number: value
        },
        success: function(res) {
            if (res.result['exists'] > 0) {
                ret = '销售订单号重复，请重新输入！';
            }
        },
        scope: this,
        sync: true
    });
    return ret;
}
</script>
		 ]]></programlisting>
		<para>
			pur_purchase_order_number_check.svc中的代码：
		</para>
		<programlisting language="screen"><![CDATA[
<a:service xmlns:s="aurora.plugin.script" xmlns:a="http://www.aurora-framework.org/application" xmlns:p="uncertain.proc" trace="true">
    <a:init-procedure>
        <s:server-script>
            $define('pur/pur_purchase_order.js');
            var p = $ctx.parameter;
            p.exists = PurOrder.orderNumberCheck(p.order_number,22);
        </s:server-script>
    </a:init-procedure>
    <a:service-output output="/parameter"/>
</a:service>
		 ]]></programlisting>
		<para>
			服务器端脚本pur_purchase_order.js中orderNumberCheck函数的实现：
		</para>
		<programlisting language="javascript"><![CDATA[
var PurOrder={
...
orderNumberCheck : function(order_number,company_id){
		var bm=$bm('pur.pur_purchase_order_number_check');
		var para = new CompositeMap();
		para.order_number=order_number;
		para.company_id=company_id;
		var res = bm.queryAsMap(para);
		return res.getChildren()[0].exists;
}
}
		 ]]></programlisting>
</sect2>
<sect2 id="purchaseorder-insert-submit" revision="1">
		<title>提交订单</title>
		<para>
		 	提交订单时，对订单号再校验一下，同时对订单行的信息的数量进行校验，然后再提交。保存订单按钮脚本如下：
		</para>
		<programlisting language="javascript"><![CDATA[
		function btn_save_order() {
            var head_ds = $('order_headers_ds');
            var rec = head_ds.getCurrentRecord();
            if (!head_ds.validate(true, true)) {
                updateHeadStatus(rec, 'Error');
                return;
            }
            if ($('order_lines_ds').getAll().length == 0) {
                Aurora.showErrorMessage('Error', '请至少保存一条销售订单行信息！');
                updateHeadStatus(rec, 'Error');
                return;
            }
            var ret = validate_order_number(rec.get('order_number'));
            if (ret !== true) {
                Aurora.showErrorMessage('Error', ret);
                rec.set('order_number', null);
            } else {
                updateHeadStatus(rec, 'Verified', true);
                head_ds.submit();
            }
        }
		]]></programlisting>
		<para>
			通过以上几步，生成以下的页面效果：
		</para>
		<mediaobject>
        	<imageobject role="fo">
	            <imagedata fileref="images/purchase_insert.jpg" format="JPG" width="330" depth="339" contentwidth="374" contentdepth="227"/>
	        </imageobject>
	        <imageobject role="html">
	            <imagedata fileref="../shared/images/purchase_insert.jpg" format="JPG"/>
	        </imageobject>
	    </mediaobject>    
	</sect2>
</sect1>