<chapter id="preparations">
    <title>准备工作</title>
    <sect1 id="preparations-info"  revision="1">
        <title>环境准备</title>
        <para>在开始开发工作之前，我们需要对开发环境进行相关的准备工作。</para>
    </sect1>
    <sect1 id="preparations-jdk"  revision="1">
        <title>JDK</title>
        <para>Aurora是基于J2EE的开发框架，因此需要JDK的环境来运行。这里我们需要JDK 1.5以上的稳定版本。</para>
        <ulink url="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Java SE Download</ulink>.
        <para>具体的安装过程不再详细描述。</para>
    </sect1>
    <sect1 id="preparations-webapp"  revision="1">
        <title>应用服务器</title>
        <para>Aurora需要运行在J2EE的容器中，市面上流行的开源或者商业应用服务器都可以运行Aurora。这里我们采用最流行的开源应用服务器Tomcat。</para>
        <ulink url="http://tomcat.apache.org/">Tomcat Download</ulink>.  
        <para>具体的安装过程不再详细描述。</para>      
    </sect1>
    <sect1 id="preparations-database"  revision="1">
        <title>数据库</title>
        <para>Aurora可以兼容市面上常见的数据库，为了演示方便我们采用最流行的MySql数据库引擎。</para>
        <ulink url="http://dev.mysql.com/downloads/mysql/">MySql Download</ulink>.  
    </sect1>       
</chapter>

<chapter id="install">
    <title>安装配置</title>
    &installation;
</chapter>

<chapter id="helloworld">
    <title>HelloWorld</title>
    &helloworld;       
</chapter>

<chapter id="purchaseorder">
    <title>采购订单</title>
    &order;
</chapter>


<chapter id="prompt-description">
    <title>多语言</title>
    <para>
       多语言包含两层含义.(1)界面的多语言 (2)数据的多语言
    </para>
    <sect1 id="prompt"  revision="1">
        <title>界面多语言</title>   
        <para>
            界面多语言主要指界面描述信息的多语言。
        </para>
        <sect2 id="prompt-init"  revision="1">
            <title>初始化</title>   
            <para>
                首先创建sys_prompts表，导入初始化数据。
            </para>
        </sect2>
        <sect2 id="prompt-config"  revision="1">
            <title>配置文件</title>   
            <para>
                  设置多语言相关文件
            </para>
        <programlisting><![CDATA[
web
|-- WEB-INF
|   |-- aurora.feature
|   |   |-- cache.config
|   |   |-- msg.config
|   |   |-- service-prompt.config
|   |-- cacheConfig
|   |   |-- service-prompt-cache.config
|   |-- classes
|   |   |-- sys
|   |   |   |-- SYS1004
|   |   |   |   |-- sys_prompts.bm
        ]]></programlisting>            
            <para>
                 注意：多语言在框架中是通过缓存方式来存储的，因此还需要配置msg.config和cache.config
            </para>
            <programlisting><![CDATA[
    <DatabaseBasedMessageProvider xmlns="aurora.i18n" descModel="sys.SYS1004.sys_prompts" defaultLang="ZHS">
    </DatabaseBasedMessageProvider>
    ]]></programlisting>        
        </sect2>
    </sect1>
    <sect1 id="description"  revision="1">
        <title>数据多语言</title>
        <para>
            数据多语言主要指在不同语言环境下数据的多语言特性.
        </para>
        <sect2 id="description-init"  revision="1">
            <title>初始化</title>   
            <para>
                首先创建fnd_description,fnd_description_s,fnd_language_code表，导入初始化数据。
            </para>
            <para>
                创建functions.getMlNextId,procedure.reset_fnd_descriptions相关包
            </para>
        </sect2>
        <sect2 id="description-config"  revision="1">
            <title>配置文件</title>   
            <para>
                 配置fnd_description.bm模型文件
            </para>
            <para>
                 数据的多语言在BM中的配置大概如下,以sys_role.bm为例
            </para> 
            <programlisting language="bm"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<ns1:model xmlns:e="aurora.service.exception" ...
    <ns1:fields>
        ...
        <!--
            表中并没有role_description字段，取而代之的是description_id。
            在description_id上设置multiLanguage="true" multiLanguageDescField="role_description"
           构建一个虚拟列role_description，设置对应的配置信息
        -->
        <ns1:field name="description_id" databaseType="BIGINT" datatype="java.lang.Long" 
                   multiLanguage="true" multiLanguageDescField="role_description"/>
        <ns1:field name="role_description" databaseType="VARCHAR" datatype="java.lang.String" 
                   forInsert="false" forUpdate="false" prompt="SYS_ROLE.ROLE_DESCRIPTION"/>    
    </ns1:fields>
    ....
    <ns1:features>
        <!--开启多语言特性-->
        <f:multi-language-storage/>
    </ns1:features>
    ...
</ns1:model>
        ]]></programlisting>      
        </sect2>
    </sect1>
</chapter>

<chapter id="lookup">
    <title>值列表</title>
    <para>值列表是一组固定数据的集合，通常用在下拉框组件中，例如状态，类型等字段</para>
    <sect1 id="lookup-init"  revision="1">
        <title>初始化</title>        
        <para>创建值列表相关表sys_codes,sys_code_values视图sys_service_lookup_v，导入初始化数据</para>
    </sect1>
    <sect1 id="lookup-config"  revision="1">
        <title>配置文件</title> 
        <para>
            创建值列表相关配置文件以及bm文件
        </para>
        <programlisting><![CDATA[
web
|-- WEB-INF
|   |-- aurora.feature
|   |   |-- service-lookup.config
|   |-- cacheConfig
|   |   |-- service-lookup-prompt-cache.config
|   |   |-- service-lookup-list-cache.config
|   |-- classes
|   |   |-- sys
|   |   |   |-- sys_service_lookup_v.bm
        ]]></programlisting>         
    </sect1>
</chapter>

<chapter id="rbac">
    <title>基础数据</title>
    <sect1 id="rbac-screen"  revision="1">
        <title>页面注册</title>
        <para>
            为了控制页面的访问权限，我们首先要把所有的页面注册到系统中。首先创建sys_service表。
        </para>
        <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="images/db_sys_service.jpg" format="JPG" width="152" depth="162" contentwidth="152" contentdepth="162"/>
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="../shared/db_sys_service.jpg" format="JPG"/>
            </imageobject>
        </mediaobject> 
        <para>
            创建sys_service.bm和sys_service.screen等相关文件
        </para>
        <programlisting><![CDATA[
web
|-- modules
|   |-- sys
|   |   |-- SYS8040
|   |   |   |-- sys_service.screen
|   |-- classes
|   |   |-- sys
|   |   |   |-- sys_service.bm
        ]]></programlisting>
        <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="images/sys_service_screen.jpg" format="JPG" width="532" depth="295" contentwidth="532" contentdepth="295"/>
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="../shared/sys_service_screen.jpg" format="JPG"/>
            </imageobject>
        </mediaobject> 
        <para>
            注册页面中主要包含三个选项(1)是否登录(2)是否权限控制(3)是否系统级页面
        </para> 
        <para>
            (1)是否登录  只有用户登录了才可以访问
        </para>
        <para>
            (1)是否权限控制  控制当前页面是否进行权限控制
        </para>
        <para>
            (1)是否系统级页面
        </para>
    </sect1>
    <sect1 id="rbac-user"  revision="1">
        <title>用户定义</title> 
        <para>
              创建系统用户表sys_user用户角色关联表sys_user_role_groups
        </para>
        <programlisting><![CDATA[
web
|-- modules
|   |-- sys
|   |   |-- SYS8210
|   |   |   |-- sys_user.screen
|   |   |   |-- sys_user_create.screen
|   |   |   |-- sys_user_role_assign.screen
|   |   |   |-- sys_user_set_password.screen
|   |   |   |-- update_self_passwrod.svc
|   |-- classes
|   |   |-- sys
|   |   |   |-- sys_user.bm
|   |   |   |-- sys_user_role_groups.bm
|   |   |   |-- sys_get_original_password.bm
|   |   |   |-- SYS8210
|   |   |   |   |-- sys_user_role_assign.bm
        ]]></programlisting>
        <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="images/sys_user_screen.jpg" format="JPG" width="592" depth="295" contentwidth="592" contentdepth="295"/>
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="../shared/sys_user_screen.jpg" format="JPG"/>
            </imageobject>
        </mediaobject>
    </sect1>
    <sect1 id="rbac-role"  revision="1">
        <title>角色定义</title> 
        <para>
              创建角色表sys_role
        </para> 
        <programlisting><![CDATA[
web
|-- modules
|   |-- sys
|   |   |-- SYS8110
|   |   |   |-- sys_role.screen
|   |   |   |-- sys_role_assign_function.screen
|   |   |-- public
|   |   |   |-- sys_role_function.svc
|   |-- classes
|   |   |-- sys
|   |   |   |-- sys_role.bm
|   |   |   |-- sys_role_function.bm
        ]]></programlisting> 
        <para>
              角色维护界面
        </para>
        <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="images/sys_role_screen.jpg" format="JPG" width="592" depth="295" contentwidth="592" contentdepth="295"/>
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="../shared/sys_role_screen.jpg" format="JPG"/>
            </imageobject>
        </mediaobject>
        <para>
              角色分配功能
        </para>
        <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="images/sys_role_assign.jpg" format="JPG" width="399" depth="323" contentwidth="399" contentdepth="323"/>
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="../shared/sys_role_assign.jpg" format="JPG"/>
            </imageobject>
        </mediaobject>      
    </sect1>
    <sect1 id="rbac-fun"  revision="1">
        <title>功能定义</title>
        <para>
               功能是权限分配的一个单元，它包含页面和bm模型。当一个角色被分配一个功能后，那么这个角色可以放到到功能对应的所有页面以及bm模型
        </para>
        <para>
               功能同时还充当了菜单的功能，觉有一定的上下级关系，因此创建功能的同时要定义好它的上级节点，以及入口页面
        </para>
        <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="images/sys_function_screen.jpg" format="JPG" width="592" depth="295" contentwidth="592" contentdepth="295"/>
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="../shared/sys_function_screen.jpg" format="JPG"/>
            </imageobject>
        </mediaobject>
        <sect2 id="rbac-fun-screen-assign"  revision="1">
            <title>页面分配</title>
            <para>功能定义好后需要定义功能包含的页面，对应的表为sys_function_service
            </para> 
         <programlisting><![CDATA[
web
|-- modules
|   |-- sys
|   |   |-- SYS8040
|   |   |   |-- sys_function_service.screen
|   |   |   |-- sys_role_assign_function.screen
|   |   |-- public
|   |   |   |-- sys_role_function.svc
|   |-- classes
|   |   |-- sys
|   |   |   |-- SYS8010
|   |   |   |   |-- sys_function_service.bm
        ]]></programlisting> 
        <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="images/sys_function_serivce.jpg" format="JPG" width="592" depth="295" contentwidth="592" contentdepth="295"/>
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="../shared/sys_function_serivce.jpg" format="JPG"/>
            </imageobject>
        </mediaobject>        
        </sect2> 
        <sect2 id="rbac-fun-bm-assign"  revision="1">
            <title>BM分配</title>
            <para>功能定义好后需要定义功能包含的BM模型，对应的表为sys_function_bm_access</para>
            <programlisting><![CDATA[
web
|-- modules
|   |-- sys
|   |   |-- SYS8010
|   |   |   |-- sys_function_bm.screen
|   |   |-- public
|   |   |   |-- sys_role_function.svc
|   |-- classes
|   |   |-- sys
|   |   |   |-- SYS8010
|   |   |   |   |-- bm_accesscheck.bm
        ]]></programlisting> 
        <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="images/sys_bm_accecc.jpg" format="JPG" width="410" depth="305" contentwidth="410" contentdepth="305"/>
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="../shared/sys_bm_accecc.jpg" format="JPG"/>
            </imageobject>
        </mediaobject> 
        </sect2>        
    </sect1>
</chapter>

<chapter id="main">
    <title>系统界面</title>
    <sect1 id="main-login"  revision="1">
        <title>登录界面</title>    
        <para>
              有了用户角色功能，我们下面就可以开发登录界面
        </para> 
           <programlisting><![CDATA[
web
|-- login.screen
|-- login.svc
|   |-- classes
|   |   |-- sys
|   |   |   |-- login
|   |   |   |   |-- sys_login.bm
        ]]></programlisting> 
         <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="images/login.jpg" format="JPG" width="235" depth="91" contentwidth="235" contentdepth="91"/>
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="../shared/login.jpg" format="JPG"/>
            </imageobject>
        </mediaobject> 
    </sect1>
    <sect1 id="login-roleselect"  revision="1">
        <title>角色选择界面</title>  
        <para>
              用户登录成功后选择对应的角色，创建role_select.screen,role_select.svc
        </para> 
        <programlisting><![CDATA[
web
|-- modules
|   |-- sys
|   |   |-- role_select.screen
|   |   |-- login.svc
|   |-- classes
|   |   |-- sys
|   |   |   |-- login
|   |   |   |   |-- sys_login.bm
        ]]></programlisting>
        <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="images/role_select.jpg" format="JPG" width="265" depth="148" contentwidth="265" contentdepth="148"/>
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="../shared/role_select.jpg" format="JPG"/>
            </imageobject>
        </mediaobject> 
    </sect1>
    <sect1 id="main-screen"  revision="1">
        <title>主界面</title>    
        <para>
              在主界面我们采用frame结构，左边显示当前角色拥有的菜单树，右边是工作区
        </para>
        <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="images/main.jpg" format="JPG" width="510" depth="347" contentwidth="510" contentdepth="347"/>
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="../shared/main.jpg" format="JPG"/>
            </imageobject>
        </mediaobject>     
    </sect1>
</chapter>

<chapter id="auth">
    <title>权限控制</title>
    <sect1 id="auth-why"  revision="1">
        <title>系统安全</title>    
        <para>
            WEB系统是通过客户的浏览器来访问的，是一个开放的系统。任何非认证通过浏览器地址可以访问到的数据都是不安全的，因此对于WEB系统要进行安全控制。
        </para> 
        <para>
            aurora框架中对于权限的控制是基于角色的权限模型，主要包含以下几个概念
        </para>
<programlisting><![CDATA[
(1)用户
(2)角色
(3)功能
   (3-1)screen页面
   (3-2)bm模型
]]></programlisting>
<para>
   这里用户相当于系统中的登录账户，角色是一个抽象的概念，主要起到分配功能的作用。功能在这里主要代表一个菜单项，一个功能包含多个页面以及多个bm。
</para>
<programlisting><![CDATA[

一个功能包含多个screen页面以及多个bm模型
功能 --> N页面
功能 --> N模型

一个角色包含多个功能
角色 --> 功能

一个用户可以被赋予多个角色
用户 -->  N角色

        ]]></programlisting>
    </sect1>
    <sect1 id="auth-cache"  revision="1">
        <title>权限缓存</title>
        <para>
            一个用户被赋予角色后就有个多个功能的使用权限，用户每次访问一个页面或者bm的时候，系统都会去检查这个用户是否被授予了对应的权限。
            当用户量非常高的时候，每次去数据库检查会给系统带来不小的压力。因此框架提供了缓存机制，启动的时候会加载进所有角色对应的权限数据。
        </para>    
        <para>
            缓存系统权限数据需要用到以下几个文件
        </para>
        <programlisting><![CDATA[
web
|-- WEB-INF
|   |-- aurora.feature
|   |   |-- cache.config
|   |   |-- msg.config
|   |-- cacheConfig
|   |   |-- bm-access-cache.config
|   |   |-- screen-access-cache.config
|   |-- classes
|   |   |-- init
|   |   |   |-- load_system_service.proc
|   |   |   |-- load_priviledge_check_data.proc
|   |   |   |-- load_role_bm_access.bm
        ]]></programlisting>
        <para>
            cache.config缓存的配置文件。cacheConfig目录主要配置需要缓存的内容，主要包含了BM和SCREEN的缓存。classes子目录init主要配置对应缓存的bm模型.
        </para>
    </sect1>
    <sect1 id="auth-control"  revision="1">
        <title>权限控制</title>    
        <para>
            有了权限数据后，我们就可以设置规则来进行访问控制。权限的访问控制主要在以下几个配置文件中
        </para>
        <programlisting><![CDATA[
web
|-- WEB-INF
|   |-- aurora.feature
|   |   |-- service-procedure.config
|   |   |-- bm-access.config
|   |   |-- cache-based-resource-access-checker.config
        ]]></programlisting> 
        <para>
            screen和bm的权限控制主要在service-procedure.config文件中来设置,bm-access.config和cache-based-resource-access-checker.config设置了bm和screen校验类的配置信息。
        </para>
        <programlisting language="myxml"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<p:procedure-registry xmlns:t="aurora.application.action" ....
    <p:procedures>
        <p:procedure name="pre-service">
            <p:set field="@success" value="true"/>
            <!--主要将应用服务器中的session内容拷贝到框架的上下文中-->
            <t:session-copy/>  
            <!--这里主要来判断是访问screen还是bm模型-->
            <p:switch test="@is_autocrud_service">  
                <p:case Value="true">
                    <!--bm的权限校验-->
                    <t:bm-access-check errorMessage="没有权限访问，或登录已失效"/>  
                </p:case>
                <p:case>
                    <!--screen的权限校验-->
                    <t:resource-access-check resultPath="/access-check/@status_code"/>  
                </p:case>
            </p:switch>
            <!-- 根据screen中的信息来选择跳转页面 -->
            <t:check-dispatch dispatchUrl="${/request/@context_path}/error_screen_unregistered.screen" ...
            <t:check-dispatch dispatchUrl="${/request/@context_path}/error_screen_unauthorized.screen" ...
            <t:check-dispatch dispatchUrl="${/request/@context_path}/error_session_expired.screen" ...
            <p:action Name="AccessCheck" />
        </p:procedure>
        <p:procedure name="session-destroy">
        </p:procedure>
    </p:procedures>
</p:procedure-registry>
]]></programlisting>
    </sect1>
</chapter>